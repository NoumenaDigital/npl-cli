name: "Publish NPL CLI Binaries"

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Override the automatic tag name for the release"
        required: false
        type: string
      release_name:
        description: "Override the automatic name of the release"
        required: false
        type: string
      draft:
        description: "Create a draft release"
        required: false
        type: boolean
        default: false
      prerelease:
        description: "Create a pre-release"
        required: false
        type: boolean
        default: false

concurrency:
  group: "publish"
  cancel-in-progress: false

jobs:
  determine-version:
    name: "Determine Release Version"
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.set-version.outputs.version }}
      release_name: "NPL Cli release ${{ steps.set-version.outputs.version }}"
      version: ${{ steps.set-version.outputs.version }}
      should_release: ${{ steps.validate-release-version.outputs.should_release }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Set up Maven"
        uses: actions/setup-java@v4
        with:
          distribution: "graalvm"
          java-version: "24"
          cache: "maven"

      - name: "Determine Release Version"
        id: set-version
        run: echo "version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

      - name: "Validate the release version"
        id: validate-release-version
        run: |
          # Run the script and capture its output
          OUTPUT=$(.github/scripts/validate-version.sh)

          # Extract the should_release value and set as output
          SHOULD_RELEASE=$(echo "$OUTPUT" | grep "should_release=" | cut -d= -f2)
          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT

          # Display the full output for debugging
          echo "$OUTPUT"

  build-native:
    name: "Build ${{ matrix.os }}-${{ matrix.arch }} Native Binary"
    needs: determine-version
    if: needs.determine-version.outputs.should_release == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu
            runner: ubuntu-latest
            arch: x86_64
            output_name: npl-cli-linux-x86_64-${{needs.determine-version.outputs.version}}
          - os: ubuntu
            runner: linux-arm-64
            arch: aarch64
            output_name: npl-cli-linux-aarch64-${{needs.determine-version.outputs.version}}
          - os: macos
            runner: macos-13
            arch: x86_64
            output_name: npl-cli-macos-x86_64-${{needs.determine-version.outputs.version}}
            sign_and_notarize: true
          - os: macos
            runner: macos-latest
            arch: aarch64
            output_name: npl-cli-macos-aarch64-${{needs.determine-version.outputs.version}}
            sign_and_notarize: true

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Set up Maven"
        uses: actions/setup-java@v4
        with:
          distribution: "graalvm"
          java-version: "24"
          cache: "maven"

      - name: "Build npl-cli native binary"
        run: mvn -Pnative package -DskipTests

      - name: "Prepare binary for upload"
        run: |
          mkdir -p dist
          if [ -f target/npl-${{needs.determine-version.outputs.version}} ]; then
            cp target/npl-${{needs.determine-version.outputs.version}} dist/${{ matrix.output_name }}
            chmod +x dist/${{ matrix.output_name }}
          fi

      - name: "Sign and Notarize macOS binary"
        if: matrix.sign_and_notarize
        run: |
          echo "$APPLE_CERTIFICATE" | base64 --decode > cli.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import cli.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

          # Sign the binary
          codesign --timestamp --options runtime --sign "$(security find-identity -v -p codesigning build.keychain | grep 'Developer ID Application' | awk '{print $2}')" dist/${{ matrix.output_name }}
          codesign --verify --verbose dist/${{ matrix.output_name }}

          # Package the signed binary in a zip for notarization
          ditto -c -k --keepParent dist/${{ matrix.output_name }} dist/${{ matrix.output_name }}.zip

          # Submit zip to notarization service
          xcrun notarytool submit dist/${{ matrix.output_name }}.zip \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: "Upload native binary artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.output_name }}
          path: dist/${{ matrix.output_name }}
          if-no-files-found: error
          retention-days: 30

  create-release:
    name: "Create GitHub Release"
    needs: [determine-version, build-native]
    if: needs.determine-version.outputs.should_release == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: "Download individual artifacts"
        uses: actions/download-artifact@v4
        with:
          path: ./individual-artifacts

      - name: "Create Release"
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.determine-version.outputs.release_tag }}
          name: ${{ needs.determine-version.outputs.release_name }}
          body: "NPL CLI release ${{ needs.determine-version.outputs.release_tag }}"
          commit: ${{ github.sha }}
          draft: ${{ github.event.inputs.draft || false }}
          prerelease: ${{ github.event.inputs.prerelease || false }}
          artifacts: "./individual-artifacts/*/*"
          artifactErrorsFailBuild: true
