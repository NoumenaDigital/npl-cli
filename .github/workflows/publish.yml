name: "Publish NPL CLI Binaries"

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Override the automatic tag name for the release"
        required: false
        type: string
      release_name:
        description: "Override the automatic name of the release"
        required: false
        type: string
      draft:
        description: "Create a draft release"
        required: false
        type: boolean
        default: false
      prerelease:
        description: "Create a pre-release"
        required: false
        type: boolean
        default: false

concurrency:
  group: "publish"
  cancel-in-progress: false

jobs:
  determine-version:
    name: "Determine Release Version"
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.set-version.outputs.version }}
      release_name: "NPL Cli release ${{ steps.set-version.outputs.version }}"
      version: ${{ steps.set-version.outputs.version }}
      should_release: ${{ steps.validate-release-version.outputs.should_release }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Set up Maven"
        uses: actions/setup-java@v4
        with:
          distribution: "graalvm"
          java-version: "24"
          cache: "maven"

      - name: "Determine Release Version"
        id: set-version
        run: echo "version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

      - name: "Validate the release version"
        id: validate-release-version
        run: |
          # Run the script and capture its output
          OUTPUT=$(.github/scripts/validate-version.sh)

          # Extract the should_release value and set as output
          SHOULD_RELEASE=$(echo "$OUTPUT" | grep "should_release=" | cut -d= -f2)
          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT

          # Display the full output for debugging
          echo "$OUTPUT"

  build-native:
    name: "Build ${{ matrix.os }}-${{ matrix.arch }} Native Binary"
    needs: determine-version
    if: needs.determine-version.outputs.should_release == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu
            runner: ubuntu-latest
            arch: x86_64
            output_name: npl-cli-linux-x86_64-${{needs.determine-version.outputs.version}}
            static: true
          - os: ubuntu
            runner: linux-arm-64
            arch: aarch64
            output_name: npl-cli-linux-aarch64-${{needs.determine-version.outputs.version}}
            static: false
          - os: macos
            runner: macos-13
            arch: x86_64
            output_name: npl-cli-macos-x86_64-${{needs.determine-version.outputs.version}}
            sign_and_notarize: true
            static: false
          - os: macos
            runner: macos-latest
            arch: aarch64
            output_name: npl-cli-macos-aarch64-${{needs.determine-version.outputs.version}}
            sign_and_notarize: true
            static: false
          - os: windows
            runner: windows-latest
            arch: x86_64
            output_name: npl-cli-windows-x86_64-${{needs.determine-version.outputs.version}}.exe
            static: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Set up Maven"
        uses: actions/setup-java@v4
        with:
          distribution: "graalvm"
          java-version: "24"
          cache: "maven"

      - name: "Install musl toolchain and build static zlib"
        if: matrix.static == true
        run: |
          # Install musl toolchain
          sudo apt-get update
          sudo apt-get install -y musl musl-dev musl-tools build-essential wget

          # Build zlib statically with musl
          cd /tmp
          wget https://zlib.net/zlib-1.3.1.tar.gz
          tar -xzf zlib-1.3.1.tar.gz
          cd zlib-1.3.1

          # Configure and build zlib with musl
          CC=musl-gcc ./configure --static --prefix=/usr/local/musl
          make
          sudo make install

          # Create symlink for the linker to find it
          sudo mkdir -p /usr/lib/x86_64-linux-musl
          sudo ln -sf /usr/local/musl/lib/libz.a /usr/lib/x86_64-linux-musl/libz.a

          # Verify installation
          echo "Checking for musl zlib:"
          ls -la /usr/lib/x86_64-linux-musl/libz.a

      - name: "Build npl-cli native binary (static linking)"
        if: matrix.static == true
        run: mvn -Pnative,native-static-linux -Dstatic=true package -DskipTests

      - name: "Build npl-cli native binary (standard/dynamic linking)"
        if: matrix.static == false
        run: mvn -Pnative package -DskipTests

      - name: "Prepare binary for upload"
        if: matrix.os != 'windows'
        run: |
          mkdir -p dist
          if [ -f target/npl-${{needs.determine-version.outputs.version}} ]; then
            cp target/npl-${{needs.determine-version.outputs.version}} dist/${{ matrix.output_name }}
            chmod +x dist/${{ matrix.output_name }}
          fi

      - name: "Prepare Windows binary for upload"
        if: matrix.os == 'windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist
          if (Test-Path target\npl-${{needs.determine-version.outputs.version}}.exe) {
            Copy-Item target\npl-${{needs.determine-version.outputs.version}}.exe -Destination dist\${{ matrix.output_name }}
          }

      - name: "Sign and Notarize macOS binary"
        if: matrix.sign_and_notarize
        run: |
          echo "$APPLE_CERTIFICATE" | base64 --decode > cli.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import cli.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

          # Sign the binary
          codesign --timestamp --options runtime --sign "$(security find-identity -v -p codesigning build.keychain | grep 'Developer ID Application' | awk '{print $2}')" dist/${{ matrix.output_name }}
          codesign --verify --verbose dist/${{ matrix.output_name }}

          # Package the signed binary in a zip for notarization
          ditto -c -k --keepParent dist/${{ matrix.output_name }} dist/${{ matrix.output_name }}.zip

          # Submit zip to notarization service
          xcrun notarytool submit dist/${{ matrix.output_name }}.zip \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: "Upload native binary artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.output_name }}
          path: dist/${{ matrix.output_name }}
          if-no-files-found: error
          retention-days: 30

  create-windows-installer:
    name: "Create Windows Installer"
    needs: [determine-version, build-native]
    if: needs.determine-version.outputs.should_release == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: windows-installer
    env:
      INSTALLER_NAME: npl-cli-windows-x86_64-${{needs.determine-version.outputs.version}}.exe
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Download versioned windows executable"
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.INSTALLER_NAME }}
          path: ./windows-installer/build

      - name: "Move exe into place"
        run: |
          mv ./build/${{ env.INSTALLER_NAME }} .

      - name: "Download and link EnVar plugin"
        run: |
          curl -LO https://nsis.sourceforge.io/mediawiki/images/7/7f/EnVar_plugin.zip
          unzip -d EnVar_plugin EnVar_plugin.zip

      - name: "Copy LICENSE.md"
        run: cp ../LICENSE.md .

      - name: "Build installer"
        run: |
          docker run \
          -v .:/npl-cli-installer \
          -v ./EnVar_plugin/Plugins:/usr/share/nsis/Plugins \
          hp41/nsis:3.01-1 \
          -DVERSION=${{needs.determine-version.outputs.version}} /npl-cli-installer/npl-cli.nsi

      - name: "Upload windows installer artifact"
        uses: actions/upload-artifact@v4
        with:
          name: npl-cli-installer.exe
          path: windows-installer/dist/npl-cli-installer.exe
          if-no-files-found: error
          retention-days: 30

  create-release:
    name: "Create GitHub Release"
    needs: [determine-version, build-native, create-windows-installer]
    if: needs.determine-version.outputs.should_release == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: "Download individual artifacts"
        uses: actions/download-artifact@v4
        with:
          path: ./individual-artifacts

      - name: "Create Release"
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.determine-version.outputs.release_tag }}
          name: ${{ needs.determine-version.outputs.release_name }}
          body: "NPL CLI release ${{ needs.determine-version.outputs.release_tag }}"
          commit: ${{ github.sha }}
          draft: ${{ github.event.inputs.draft || false }}
          prerelease: ${{ github.event.inputs.prerelease || false }}
          artifacts: "./individual-artifacts/*/*"
          artifactErrorsFailBuild: true

  update-homebrew-formula:
    name: "Trigger NoumenaDigital/homebrew-tools"
    runs-on: ubuntu-latest
    needs: [ determine-version, create-release ]
    steps:
      - name: "Trigger bump-cli-version workflow"
        env:
          GH_TOKEN: ${{ secrets.HOMEBREW_TAP_BUMP_VERSION_PR_TOKEN }}
        run: |
          gh workflow run bump-cli-version.yml \
            --repo NoumenaDigital/homebrew-tools \
            -f CLI_VERSION=${{ needs.determine-version.outputs.release_tag }}
